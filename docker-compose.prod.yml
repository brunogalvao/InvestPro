version: '3.8'

services:
  # Banco de dados Postgres
  postgres:
    image: postgres:16-alpine
    container_name: investpro-postgres-prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - investpro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache das traduções
  redis:
    image: redis:7-alpine
    container_name: investpro-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - investpro-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API de traduções i18n
  i18n-api:
    build:
      context: ./i18n-api
      dockerfile: Dockerfile
    container_name: investpro-i18n-api-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - PORT=3000
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - investpro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API de contas (CRUD + Auth)
  account-api:
    build:
      context: ./account-api
      dockerfile: Dockerfile
    container_name: investpro-account-api-prod
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - BCRYPT_SALT_ROUNDS=${BCRYPT_SALT_ROUNDS:-10}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - CORS_ORIGIN=${CORS_ORIGIN}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - investpro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  investpro-network:
    driver: bridge
