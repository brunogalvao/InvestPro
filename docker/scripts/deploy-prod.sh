#!/bin/bash

# üöÄ Script de Deploy para Produ√ß√£o - InvestPro
# Uso: ./docker/scripts/deploy-prod.sh [--force]

set -e

echo "üöÄ Iniciando deploy de produ√ß√£o..."

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Inicie o Docker e tente novamente."
    exit 1
fi

# Verificar se docker-compose est√° dispon√≠vel
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose n√£o est√° instalado. Instale e tente novamente."
    exit 1
fi

# Verificar se arquivo de ambiente existe
if [[ ! -f ".env.prod" ]]; then
    echo "‚ùå Arquivo .env.prod n√£o encontrado!"
    echo "üìã Crie o arquivo .env.prod baseado em docker/configs/env.example"
    exit 1
fi

# Argumentos
FORCE=false
if [[ "$1" == "--force" ]]; then
    FORCE=true
    echo "üîß Deploy for√ßado ativado"
fi

# Confirma√ß√£o de deploy
if [[ "$FORCE" != true ]]; then
    echo ""
    echo "‚ö†Ô∏è  ATEN√á√ÉO: Este √© um deploy de PRODU√á√ÉO!"
    echo "üìã Verifique se:"
    echo "  - Todas as vari√°veis de ambiente est√£o configuradas"
    echo "  - O banco de dados est√° configurado"
    echo "  - As senhas s√£o seguras"
    echo ""
    read -p "ü§î Continuar com o deploy? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "‚ùå Deploy cancelado pelo usu√°rio"
        exit 1
    fi
fi

# Backup dos dados existentes (se houver)
if docker volume ls | grep -q "investpro_postgres_data"; then
    echo "üíæ Criando backup do banco de dados..."
    docker run --rm -v investpro_postgres_data:/data -v $(pwd):/backup alpine tar czf /backup/postgres_backup_$(date +%Y%m%d_%H%M%S).tar.gz -C /data .
fi

# Parar servi√ßos existentes
echo "üõë Parando servi√ßos existentes..."
docker-compose -f docker-compose.prod.yml --env-file .env.prod down

# Build dos containers
echo "üì¶ Build dos containers..."
./docker/scripts/build-all.sh --no-cache

# Iniciar servi√ßos de produ√ß√£o
echo "üöÄ Iniciando servi√ßos de produ√ß√£o..."
docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d

# Aguardar servi√ßos ficarem saud√°veis
echo "‚è≥ Aguardando servi√ßos ficarem saud√°veis..."
sleep 15

# Verificar status dos servi√ßos
echo "üìä Status dos servi√ßos:"
docker-compose -f docker-compose.prod.yml --env-file .env.prod ps

# Verificar health checks
echo "üè• Verificando health checks..."
echo "  - PostgreSQL: $(docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T postgres pg_isready -U ${POSTGRES_USER:-investpro} -d ${POSTGRES_DB:-investpro} 2>/dev/null && echo "‚úÖ" || echo "‚ùå")"
echo "  - Redis: $(docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T redis redis-cli ping 2>/dev/null | grep -q "PONG" && echo "‚úÖ" || echo "‚ùå")"
echo "  - i18n API: $(curl -s http://localhost:3000/health >/dev/null && echo "‚úÖ" || echo "‚ùå")"
echo "  - Account API: $(curl -s http://localhost:4000/health >/dev/null && echo "‚úÖ" || echo "‚ùå")"

echo ""
echo "‚úÖ Deploy de produ√ß√£o conclu√≠do!"
echo ""
echo "üåê URLs dispon√≠veis:"
echo "  - API de Contas: http://localhost:4000"
echo "  - API de Tradu√ß√µes: http://localhost:3000"
echo "  - PostgreSQL: localhost:5432"
echo "  - Redis: localhost:6379"
echo ""
echo "üìã Comandos √∫teis:"
echo "  - Ver logs: docker-compose -f docker-compose.prod.yml --env-file .env.prod logs -f"
echo "  - Parar: docker-compose -f docker-compose.prod.yml --env-file .env.prod down"
echo "  - Status: docker-compose -f docker-compose.prod.yml --env-file .env.prod ps"
echo ""
echo "üîí Lembre-se de:"
echo "  - Configurar firewall"
echo "  - Configurar SSL/HTTPS"
echo "  - Configurar monitoramento"
echo "  - Configurar backups autom√°ticos"
